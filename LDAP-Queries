#Domain Enumeration

#Group Membership
([ADSISEARCHER]"samaccountname=$('ENTERUSERNAME')").Findone().Properties.memberof -replace '^CN=([^,]+).+$','$1' | sort-object



To test
# Find all users with given name Pawel
([adsisearcher]"givenname=pawel").FindAll()
 
# Find users based on other attibutes
([adsisearcher]"(&(objectClass=User)(surname=janowicz))").FindAll()
([adsisearcher]"(&(objectClass=User)(city=Warsaw))").FindAll()
([adsisearcher]"(&(objectClass=User)(mobile=+48555444333))").FindOne()
 
# Find user based on name and display all properties
([adsisearcher]"(&(objectClass=person)(objectClass=user)(name=pawel.janowicz))").FindAll().properties


([adsisearcher]"(&amp;(objectcategory=computer)(lastlogontimestamp<=$((Get-Date).AddDays(-105).ToFileTime())))").findall()

# Filters for all privileged accounts.
([adsisearcher]”(&(admincount=1))”).FindAll() [PowerShell]

# Enumerates all of the crackable service accounts. (Works well no need to import modules)
([adsisearcher]”(&(objectClass=User)(primarygroupid=513)(servicePrincipalName=*))”).FindAll() | ForEach-Object { “Name:$($_.properties.name)””SPN:$($_.properties.serviceprincipalname)””Path:$($_.Path)”””}

# Gives us all attributes associated with a particular computer.
(([adsisearcher]”(name=Computer)”).FindAll()) | Select -Expand Properties

# View Users with Description Field
([adsisearcher]"(&(objectClass=group)(samaccountname=*))").FindAll().Properties | % { Write-Host $_.samaccountname : $_.description } 

# Add a domain user to a remote server local group, if your current user has admin over the remote machine
powershell -c ([ADSI]'WinNT://SERVER/Administrators,group').add('WinNT://DOMAIN/USER,user')

# Get all local groups on a remote server
powershell -c "([ADSI]'WinNT://SERVER,computer').psbase.children | where { $_.psbase.schemaClassName -eq 'group' } | foreach { ($_.name)[0]}"

# Find members of the local Administrators group on a remote server
powershell -c "$([ADSI]'WinNT://SERVER/Administrators,group').psbase.Invoke('Members') | foreach { $_.GetType().InvokeMember('ADspath', 'GetProperty', $null, $_, $null).Replace('WinNT://', '') }"

# Enable the local Administrator account on a remote server
powershell -c "$a=([ADSI]'WinNT://SERVER/Administrator,user');$a.UserFlags=2;$a.CommitChanges()"

# Disable the local Administrator account on a remote server
powershell -c "$a=([ADSI]'WinNT://SERVER/Administrator,user');$a.UserFlags=512;$a.CommitChanges()"

